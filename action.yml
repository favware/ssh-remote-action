name: SSH Remote Command Action
description: Executes a provided command on a remote SSH server using a private key or password.
author: favware

branding:
  icon: terminal
  color: gray-dark

inputs:
  host:
    description: SSH host address (i.e. the IP address of the server)
  port:
    description: SSH port number
    default: '22'
  key:
    description: Content of the SSH private key. For example, the raw content of ~/.ssh/id_rsa.
  passphrase:
    description: Passphrase for the SSH key (only used if "key" is provided)
  username:
    description: SSH username
  password:
    description: SSH password (ignored if "key" is provided)
  command:
    description: Commands to be executed.

runs:
  using: composite
  steps:
    - id: ssh-remote-command
      shell: bash
      env:
        SSH_HOST: ${{ inputs.host }}
        SSH_PORT: ${{ inputs.port }}
        SSH_KEY: ${{ inputs.key }}
        SSH_KEY_PASSPHRASE: ${{ inputs.passphrase }}
        SSH_USERNAME: ${{ inputs.username }}
        SSH_PASSWORD: ${{ inputs.password }}
        SSH_COMMAND: ${{ inputs.command }}
      run: |
        # Check if SSH_USERNAME is set
        if [ -z "${SSH_USERNAME}" ]; then
            echo "with.username is not set. Exiting..."
            exit 1;
        fi

        # Check if SSH_HOST is set
        if [ -z "${SSH_HOST}" ]; then
            echo "with.host is not set. Exiting..."
            exit 1;
        fi

        # Check if SSH_COMMAND is set
        if [ -z "${SSH_COMMAND}" ]; then
            echo "with.command is not set. Exiting..."
            exit 1;
        fi

        # Default to SSH port 22
        SSH_PORT=${SSH_PORT:-22}

        # Define the default SSH arguments that apply for both key and password flows
        SSH_ARGS="-p ${SSH_PORT} ${SSH_USERNAME}@${SSH_HOST} \"${SSH_COMMAND}\""

        eval "$(ssh-agent -s)"

        if [ -n "${SSH_KEY}" ]; then
            echo "Using SSH key..."

            # Write the private key to a file
            echo "${SSH_KEY}" > ./private.key

            # Set the permissions
            chmod 600 ./private.key

            # Check if the SSH_KEY_PASSPHRASE is empty
            if [ -z "${SSH_KEY_PASSPHRASE}" ]; then
                echo "SSH Key Passphrase is empty, just adding the key to the SSH agent..."
                # Add the private key to the SSH agent
                ssh-add ./private.key < /dev/null
            else
                echo "SSH Key Passphrase is set, creating a script to echo the passphrase and adding the key to the SSH agent..."
                # Create a script that will echo the passphrase
                printf "%s\n" "#!/usr/bin/env bash" "echo ${SSH_KEY_PASSPHRASE}" > ./ssh-passphrase
                chmod +x ./ssh-passphrase

                # Set the permissions
                DISPLAY=1 SSH_ASKPASS="./ssh-passphrase" ssh-add ./private.key < /dev/null
            fi

            # Execute the SSH command
            ssh ${SSH_ARGS}

        elif [ -n "${SSH_PASSWORD}" ]; then

            # Execute the SSH command
            sshpass -p "${SSH_PASSWORD}" ssh ${SSH_ARGS}

        else
            echo "Neither inputs.key nor inputs.password are set. Exiting..."
            exit 1;
        fi

